#!/usr/bin/env python3

import signal
import re
import subprocess
import sys
from gi.repository import Gtk, GObject
import logging

ICON_BASE = "/usr/share/icons/Faenza-Ambiance/status/"
ICON_SIZE = "22"
ICON_EXT = "svg"
UPDATE_INTERVAL = 1 

class Battery:
    regex = '^Battery ([0-9]): ([^\s]+), ([0-9]+)%(, (.*))?$'
    
    def __init__(self, acpi_string):
        # Attempt to update our status with the acpi string
        ret = self.update(acpi_string)
        if ret:
            self.valid = True
        else:
            self.valid = False
        
        # We want to keep track of the previous icon file so we're not
        # unnecessarily changing it
        self._prev_icon = None

    def __repr__(self):
        out = "Battery\nID: {0}\n".format(self.id)
        out += "State: {0}\n".format(self.state)
        out += "Charge: {0}%".format(self.charge)

        if self.time_str:
            out += "\nTime: {0}".format(self.time_str)

        return out

    def update(self, acpi_string):
        m = re.search(Battery.regex, acpi_string)

        if m:
            self.id = m.group(1)
            self.state = m.group(2)
            self.charge = int(m.group(3))
            # Time string includes "until charged" or "remaining"
            self.time_str = m.group(5)

            return True
    
        else:
            logging.debug("Couldn't parse acpi string: {0}".format(acpi_string))
            return False

    def icon_file(self):
        ret = ""

        if self.charge < 10:
            ret = 'gpm-primary-000{0}.{1}'
        elif self.charge < 30:
            ret = 'gpm-primary-020{0}.{1}'
        elif self.charge < 50:
            ret = 'gpm-primary-040{0}.{1}'
        elif self.charge < 70:
            ret = 'gpm-primary-060{0}.{1}'
        elif self.charge < 90:
            ret = 'gpm-primary-080{0}.{1}'
        else:
            ret = 'gpm-primary-100{0}.{1}'

        if self.state == "Full" or self.state == "Charging":
            ret = ret.format('-charging', ICON_EXT)
        else:
            ret = ret.format('', ICON_EXT)

        ret = "{0}{1}/{2}".format(ICON_BASE, ICON_SIZE, ret)

        return ret

    def update_icon(self):
        logging.debug("Updating text: {0}".format(self.__repr__()))
        self.icon.set_tooltip_text(self.__repr__())
        
        new_icon = self.icon_file()
        if self._prev_icon != new_icon:
            logging.debug("Updating icon: {0}".format(new_icon))
            self.icon.set_from_file(self.icon_file())
            self._prev_icon = new_icon

    def destroy(self):
        b.icon.set_visible(True)
        b.icon = None
        
class SimpleBatt:
    def _acpi_update(self):
        # Example acpi output:
        # Battery 0: Discharging, 17%, 00:48:08 remaining
        self._acpi_status = subprocess.check_output("acpi")
        self._acpi_status = str(self._acpi_status, encoding = "UTF-8")
        self._acpi_status = self._acpi_status.splitlines()

    def _find_batts(self):
        count = 1
        for line in self._acpi_status:
            b = Battery(line)

            # Only add the battery if it's valid and there is not already one
            # in it's place
            if b.valid and (len(self.batts) < count):
                # Create the GTK status icon
                b.icon = Gtk.StatusIcon()
                b.update_icon()
                b.icon.set_visible(True)

                self.batts.append(b)
                count += 1

        if len(self.batts) == 0:
            sys.exit("No batteries found")

    def __init__(self):
        logging.basicConfig(stream=sys.stderr, level=logging.DEBUG)

        self._acpi_update()
        self.batts = []
        self._find_batts()

    def _gtk_update(self):
        logging.debug("Updating")
        # GTK calls this update function
        # Update our acpi data, then update each battery
        self._acpi_update()

        # Try and find any new batteries
        self._find_batts()

        # Update each battery
        count = 0
        for b in self.batts:
            ret = b.update(self._acpi_status[count])
            if ret == False:
                # Battery probably no longer exists, destroy it
                b.destroy()
            else:
                # Otherwise update the batteries icon
                b.update_icon()
                pass
                
            count += 1

        # Make sure we run again
        GObject.timeout_add_seconds(UPDATE_INTERVAL, self._gtk_update)


    def gtk_start(self):
        # Set a timer to call the gtk_update function
        GObject.timeout_add_seconds(UPDATE_INTERVAL, self._gtk_update)
 
        Gtk.main()

if __name__ == "__main__":
    # Make sure Ctrl + C works
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    
    # Start application
    sb = SimpleBatt()
    sb.gtk_start()
